name: Automatic Labeling

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  labeler:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set Labels
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo, number: pull_number } = context.issue;
          const { data: pullRequest } = await github.rest.pulls.get({ owner, repo, pull_number });

          let label = '';

          if (pullRequest.title.toLowerCase().includes('wip')) {
            label = 'wip';
          } else if (pullRequest.draft) {
            label = 'reviews needed';
          } else if (pullRequest.mergeable_state === 'dirty') {
            label = 'merge conflicts';
          } else {
            const { data: reviews } = await github.rest.pulls.listReviews({ owner, repo, pull_number });
            const approved = reviews.some(review => review.state === 'APPROVED');
            if (approved) {
              label = 'merge me please';
            }
          }

          // list of labels to be removed
          const labelsToRemove = ['merge me please', 'reviews needed', 'merge conflicts', 'wip'];

          // remove all label from list
          const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({ owner, repo, issue_number: pull_number });
          for (const { name } of currentLabels) {
            if (labelsToRemove.includes(name)) {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: pull_number,
                name
              });
            }
          }

          // Add label
          if (label) {
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pull_number,
              labels: [label]
            });
          }
